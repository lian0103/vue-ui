const Components = require("../components.json");
const fs = require("fs");
const render = require("json-templater/string");
const uppercamelcase = require("uppercamelcase");
const path = require("path");
const endOfLine = require("os").EOL;

const OUTPUT_PATH = path.join(__dirname, "../index.js");
const IMPORT_TEMPLATE = "import {{name}} from './gt-components/{{package}}/index.js';";
const INSTALL_COMPONENT_TEMPLATE = "  {{name}}";
const MAIN_TEMPLATE = `/* Automatically generated by 'build/bin/gen-pkg-index.cjs' */

{{include}}

const components = [
{{install}}
];

const install = function(Vue, opts = {}) {

  components.forEach((component) => {
    if (component.name && component.install) {
      Vue.component(component.name, component);
    } else {
      Object.values(component).forEach((comp) => {
        Vue.component(comp.name, comp);
      });
    }
  });

  // Vue.prototype.$ELEMENT = {
  //   size: opts.size || '',
  //   zIndex: opts.zIndex || 2000
  // };

  // Vue.prototype.$loading = Loading.service;
  // Vue.prototype.$msgbox = MessageBox;
  // Vue.prototype.$alert = MessageBox.alert;
  // Vue.prototype.$confirm = MessageBox.confirm;
  // Vue.prototype.$prompt = MessageBox.prompt;
  // Vue.prototype.$notify = Notification;
  // Vue.prototype.$message = Message;

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  install,
{{list}}
};
`;

delete Components.font;

var ComponentNames = Object.keys(Components);

var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach((name) => {
  var componentName = uppercamelcase(name);

  includeComponentTemplate.push(
    render(IMPORT_TEMPLATE, {
      name: componentName,
      package: name,
    })
  );
  //   if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {
  if ([].indexOf(componentName) === -1) {
    installTemplate.push(
      render(INSTALL_COMPONENT_TEMPLATE, {
        name: componentName,
        component: name,
      })
    );
  }

  // if (componentName !== "Loading") listTemplate.push(`  ${componentName}`);
  listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join("," + endOfLine),
  version: require("../package.json").version,
  list: listTemplate.join("," + endOfLine),
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log("[build entry] DONE:", OUTPUT_PATH);
